//Vigenere CS50 assignment
#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <ctype.h>


int main (int argc, string argv[])
{
    //check if there are 2 arguments
    if (argc != 2)
    {
        printf ("./Vigenere k\n");
        //Ask why return 1, what is return???
        return 1;
    }

    else
    {
        //check if input is all alphabetical
        //???? better solution for sub? try to print once in for loop????
        int sub;
        for (int a = 0, b = strlen(argv[1]); a < b; a++)
        {
            if (!isalpha (argv[1][a]))
            {
                sub = 1;
            }
        }
        //refer to Line 17
        if (sub == 1)
        {
            printf ("./Vigenere k\n");
            //ask anton why returns 1, not 0????
            return 1;
        }

        else
        {
            //prompt the user for text
            string s = get_string("plaintext: ");
            printf("ciphertext: ");
            //apply the cipher equation
            //count the spaces in the text, refer to line 41
            int count = 0;
            for (int i = 0, n = strlen(s); i < n; i++)
            {
                //check to see if text is alphabetical
                if (!isalpha (s[i]))
                {
                    count++;
                    printf("%c", s[i]);
                }

                else
                {
                    int b = strlen (argv[1]);
                    //check if its upper or lower case
                    //and encrypt the text
                    if (isupper (s[i]) && isupper (argv[1][(i - count) % b]))
                    {
                        printf("%c", (s[i] + argv[1][(i - count) % b] - 2 * 'A') % 26 + 'A');
                    }
                    else if (isupper (s[i]) && islower (argv[1][(i - count) % b]))
                    {
                        printf("%c", (s[i] + argv[1][(i - count) % b] - 'a' - 'A') % 26 + 'A');
                    }
                    else if (islower (s[i]) && isupper (argv[1][(i - count) % b]))
                    {
                        printf("%c", (s[i] + argv[1][(i - count) % b] - 'A' - 'a') % 26 + 'a');
                    }
                    else if (islower (s[i]) && islower (argv[1][(i - count) % b]))
                    {
                        printf("%c", (s[i] + argv[1][(i - count) % b] - 2 * 'a') % 26 + 'a');
                    }

                }
            }
        }
        printf("\n");
    }
}
